---
layout:     post
title:      "Mybatis学习1-入门"
subtitle:   " \"Mybatis\""
date:   2017-10-10 11:28:18 +0800
author:     "Nian Tianlei"
header-img: "img/post-bg-2016.jpg"
tags:
    - Java web开发
    - Mybatis
---

#### Mybatis作用
一般用JDBC访问数据库，除了需要自己写SQL之外，还必须操作Connection, Statment, ResultSet 等，过程繁琐。不仅如此，访问不同的表，还会写很多雷同的代码，增加工作量。   
例如：  
```
package jdbc;
   
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
   
public class TestJDBC {
    public static void main(String[] args) {
   
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
   
        try (
            Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/nian_test?characterEncoding=UTF-8",
                "root", "admin");
            Statement s = c.createStatement();              
        )
        {
            String sql = "insert into man values(null," + "'念'" + "," + 180.0f + "," + 70 + ")";
            s.execute(sql);
               
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}
```
Mybatis是一个持久层的框架，使用Mybatis框架，则只需提供SQL语句，其他的工作，诸如建立连接，Statement，相关异常处理等等都交给Mybatis去做了，那些重复性的工作Mybatis也给做掉了，我们只需要关注在增删改查等操作层面上，具体细节不再可见。  

#### 工作原理： 
1、配置mybatis的配置文件，mybatis-config.xml（名称不固定）；  
2、通过配置文件，加载mybatis运行环境，创建SqlSessionFactory会话工厂(SqlSessionFactory在实际使用时按单例方式)；  
3、通过SqlSessionFactory创建SqlSession。SqlSession是一个面向用户接口（提供操作数据库方法），实现对象是线程不安全的，建议sqlSession应用场合在方法体内；  
4、调用sqlSession的方法去操作数据。如果需要提交事务，需要执行SqlSession的commit()方法；  
5、释放资源，关闭SqlSession。  
#### 开发dao的方法
mapper代理开发方法  
只需编写mapper接口（就是dao接口）。程序员在编写mapper.xml(映射文件)和mapper.java需要遵循一个开发规范：

- mapper.xml中namespace就是mapper.java的类全路径。  
- mapper.xml中statement的id和mapper.java中方法名一致。  
- mapper.xml中statement的parameterType指定输入参数的类型和mapper.java的方法输入参数类型一致  
- mapper.xml中statement的resultType指定输出结果的类型和mapper.java的方法返回值类型一致。  
mybatis-config.xml配置文件：可以配置properties属性、别名、mapper加载。



#### 一个简单实现
首先创建数据库  
```
create database how2java
```
创建表  
```
USE how2java;
 
CREATE TABLE category_ (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(32) DEFAULT NULL,
  PRIMARY KEY (id)
) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;
```
创建项目mybatis，导入jar包`mybatis-3.4.2.jar`和`mysql-connector-java-5.0.8-bin.jar`  
创建实体类  
```
package com.how2java.pojo;
 
public class Category {
	// 这里没什么说的   数据库的表里有什么这里就有什么
    private int id;
    private String name;
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
}
```
配置文件`mybatis-config.xml`  
```
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<!-- 自动扫描com.how2java.pojo下的类型 -->
	<typeAliases>
	  <package name="com.how2java.pojo"/>
	</typeAliases>
    <environments default="development">
        <environment id="development">
        	<!-- 使用jdbc事务管理，事务由mybatis控制-->
            <transactionManager type="JDBC"/>
             <!-- 数据库连接池,由mybatis管理-->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8"/>
                <property name="username" value="root"/>
                <property name="password" value="admin"/>
            </dataSource>
        </environment>
    </environments>
    <!--  加载映射Category.xml -->
    <mappers>
        <mapper resource="com/how2java/pojo/Category.xml"/>
    </mappers>
</configuration>
```
配置映射文件`Category.xml`  
```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	 <!-- namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离
	 注意：使用mapper代理方法开发，namespace有特殊重要的作用
	 -->
    <mapper namespace="com.how2java.pojo">
    <!-- 在映射文件中配置很多sql语句 -->
    <!--需求:通过id查询用户表的记录 -->
    	<!-- 通过select执行数据库查询
     	id:标识映射文件中的sql，称为statement的id
    	 将sql语句封装到mappedStatement对象中，所以将id称为statement的id -->
    	<!-- resultType：指定sql输出结果的映射的java对象类型，select指定
    	resultType表示将单条记录映射成java对象 -->
        <select id="listCategory" resultType="Category">
            select * from   category_      
        </select>
    </mapper>
```
测试类  
```
package com.how2java.pojo;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
 
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 
import com.how2java.pojo.Category;
 
public class test {
 
    public static void main(String[] args) throws IOException {
        //mybatis配置文件
    	String resource = "mybatis-config.xml";
    	// 得到配置文件流
        InputStream inputStream = Resources.getResourceAsStream(resource);
        //创建会话工厂，传入mybatis配置文件的信息
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        // 通过工厂得到SqlSession
        SqlSession session=sqlSessionFactory.openSession();
        // 通过SqlSession操作数据库
        // listCategory为映射文件Category.xml中sql   的statement的id
        List<Category> cs=session.selectList("listCategory");
        for (Category c : cs) {
            System.out.println(c.getName());
        }
         
    }
}
```
输出：  
![a]({{ "/img/post/Mybatis/1.png" | prepend: site.baseurl }} )  

#### 流程总结
1. 应用程序找Mybatis要数据  
2. Mybatis从数据库中找来数据  
　2.1 通过mybatis-config.xml 定位哪个数据库  
　2.2 通过Category.xml执行对应的select语句  
　2.3 基于Catgory.xml把返回的数据库记录封装在Category对象中  
　2.4 把多个Category对象装在一个Category集合中  
3. 返回一个Category集合  
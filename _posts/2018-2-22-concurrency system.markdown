---
layout:     post
title:      "高并发系统基础分析"
subtitle:   " \"concurrency system\""

author:     "Nian Tianlei"
header-img: "img/post-bg-2016.jpg"
header-mask: 0.4
catalog:    true
tags:
    - 并发设计
---
> 下滑这里查看更多内容

高并发场景越来越常见，抢红包、网购秒杀、春节抢票等场景都是对系统的考验。当一个系统，在极短的时间内（1秒）收到十万级别的请求时，系统的负载能力、稳定性是至关重要的。  

### 负载均衡
某些终端（手机、PC机）发送请求，最先到达负载均衡器，然后将请求分发处理。  

负载均衡器的作用：  
- 对请求做初步分析，决定分不分发请求到服务器，分发软件如Nginx等反向代理服务器，可以禁止一些无效的请求，比如封禁一些违规的IP地址。  
- 提供负载均衡算法，考虑各个服务器的负载能力进行合理分发，使每个服务器得到比较均衡的请求，从而降低单个服务器的压力，提高系统的响应能力。  
- 限流，对于一些高并发时刻，双十一、618等，需要进行限流，因为某个时刻请求过多，分发后到达一个服务器的请求仍然很多，使得服务器宕机。当某些服务器宕机后，其他服务器将会承受更大的请求量，这样容易产生多台服务器宕机的可能，持续下去会引发服务器雪崩。  因此，要加上限流处理，对于请求过多的时刻，告知用户系统繁忙，稍后再试，从而保证系统稳定、持续。  

### 有效请求和无效请求
有效请求就是用户真是的需求，而无效请求就是违规的虚假的请求。  
有些不法分子为了抢购商品，会使用作弊软件连续发送大量请求，服务端要处理这些请求，无疑增加了负载。  

毫无疑问，这种同一用户在一秒内发送几百个甚至几千个请求到服务器，可以认为是无效请求。  
应对方法，可以增加验证码。一般：前几次无需用户输入验证码，之后的每次请求都要输入。  

但是验证码也有可能破解。可以选择使用短信验证的方式，但是比较麻烦；第二个选择是负载均衡转发给服务器之前，对单位时间同一账号请求数量进行判断，太多均认为是无效请求。这样可以压制同一用户的批量操作，也提高了系统性能。  

但是有些用户可能申请多个账号来进行批量操作，可采取的措施有：提高账户的信息完整度，判断是否为同一人，或者通过增加实名认证、银行卡绑定等措施屏蔽一人多号的情况。  

还有可能，一些组织可以有多个账号（属于不同人），伪造有效请求。这种情况比较难处理，能想到的就是采用僵尸账号识别，僵尸账号就是只在特定的秒杀时期，进行操作的账号。对这些账号的请求可以排除。  

### 系统设计
高并发场景需要高并发的系统分摊压力。通过Nginx请求分发，使请求均衡分布到服务器中。服务器可以按业务模块划分，不同服务器处理不同的业务。  
这样一个服务器管理一种业务，简单易行，还提高了开发效率，数据库开发也变得方便。  
另一种分发就是通过用户编号进行分发。每个服务器处理一部分用户请求，当然业务都是相同的。  

一般大型的网站会同时利用两种划分方式，提高服务器响应速度和吞吐量。  

### 数据库设计
简单的分库分表，一张表的数据分成多张。最后根据某些信息去寻找特定的表（比如月份，年份，种类等等）。  
SQL优化，使用主键进行查询，主键尽可能短等等。  
### 缓存
使用缓存就不需操作数据库，提高响应速度。  
### 主从服务器
主服务器负责写不负责读，从服务器只负责读，不负责写。如Redis。  
### 动静分离
比如：图片与页面分离，图片视频最消耗资源，有必要为图片、视频弄一个专门的服务器，以降低页面请求的压力。
### 其他
其实提高并发能力最直接的方式有两种，提高单个服务器硬件性能和增加服务器。

### 并发带来的问题
在高并发场景中，由于有多个线程，如何保证数据的一致性是一个重要问题。比如秒杀系统，已经没有库存了，但没有及时反馈，用户还能抢购。这样就出现了问题。  
加锁可以保证数据一致，但加锁就影响性能。这就发生了冲突。